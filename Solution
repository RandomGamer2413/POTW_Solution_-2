import numpy as np

def maxNumOfEventsCanAttend1(txtFile):
    diffs = []
    event_ranges = []
    minim = []
    maxim = []
    
    with open(txtFile, 'r') as eventsTxt:
        for line in eventsTxt:
            event_ranges.append(line.split(" "))
    
    event_ranges = event_ranges[1:]
    
    for element in event_ranges:
        element[0] = int(element[0])
        element[1] = int(element[1])
        minim.append(element[0])
        maxim.append(element[1])
        diffs.append(element[1]-element[0])
    
    event_ranges.sort(key=sorted_events)
    
    minim.sort()
    maxim.sort(reverse = True)
    minim = minim[0]
    maxim = maxim[0]
    
    rangeOfEvents = maxim-minim
    
    chosen = []
    true_range = [[]]
    counter = 0
    
    for i in event_ranges:
        counter_j = 0
        true_true_range = np.array(true_range)
        current_ranges = list(range(i[0],i[1]+1))
        start = current_ranges[0]
        end = current_ranges[len(current_ranges)-1]
        if counter > rangeOfEvents:
            break
        if current_ranges in true_range and counter <= rangeOfEvents:
            continue
        elif len([x for x in set(list(range(start, end+1))) if x in set(np.hstack(true_true_range))]) == 1 and counter <= rangeOfEvents:
            chosen.append(i)
            true_range.append(current_ranges)
            counter += (i[1]-i[0])
            continue
        else:
            for j in current_ranges:
                counter_j += 1
                if j in np.hstack(true_true_range):
                    break
                elif j not in np.hstack(true_true_range) and counter <= rangeOfEvents and counter_j == len(current_ranges):
                    true_range.append(current_ranges)
                    chosen.append(i)
                    counter += (i[1]-i[0])
                    break
                elif j not in np.hstack(true_true_range) and counter <= rangeOfEvents and counter_j < len(current_ranges):
                    continue
                else:
                    break
    chosen.sort()
    return(chosen, f"These {len(chosen)} event(s) were chosen.")
